# Production-Ready Application Configuration
spring:
  application:
    name: tenant-management-service

  # Database Configuration
  datasource:
    url: ${DB_URL:jdbc:postgresql://localhost:5000/tenant_db}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: org.postgresql.Driver
    hikari:
      minimum-idle: ${DB_MIN_IDLE:10}
      maximum-pool-size: ${DB_MAX_POOL:50}
      connection-timeout: ${DB_CONNECTION_TIMEOUT:20000}
      leak-detection-threshold: ${DB_LEAK_DETECTION:60000}
      max-lifetime: ${DB_MAX_LIFETIME:1800000}
      validation-timeout: ${DB_VALIDATION_TIMEOUT:5000}
      auto-commit: false

  # Jackson Configuration
  jackson:
    default-property-inclusion: non_null
    serialization:
      write-dates-as-timestamps: false
      indent-output: false
    deserialization:
      fail-on-unknown-properties: false
    time-zone: UTC
    date-format: yyyy-MM-dd'T'HH:mm:ss.SSS'Z'

  # JPA Configuration
  jpa:
    open-in-view: false
    show-sql: false
    hibernate:
      ddl-auto: validate
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: false
        jdbc:
          time_zone: UTC
          batch_size: ${HIBERNATE_BATCH_SIZE:25}
        order_inserts: true
        order_updates: true
        query:
          in_clause_parameter_padding: true
        generate_statistics: false


  # Flyway Configuration
  flyway:
    enabled: true
    baseline-on-migrate: true
    locations: classpath:db/migration
    table: schema_version
    baseline-version: 0
    validate-on-migrate: true
    out-of-order: false

  # Cache Configuration
  cache:
    type: caffeine
    caffeine:
      spec: maximumSize=${CACHE_MAX_SIZE:5000},expireAfterWrite=${CACHE_TTL:10m}
    cache-names:
      - tenants
      - tenant-config
      - tenant-features

  # Task Execution Configuration
  task:
    execution:
      pool:
        core-size: ${TASK_CORE_SIZE:10}
        max-size: ${TASK_MAX_SIZE:20}
        queue-capacity: ${TASK_QUEUE_CAPACITY:200}
        keep-alive: 60s
      thread-name-prefix: tenant-exec-
    scheduling:
      pool:
        size: ${SCHEDULING_POOL_SIZE:5}
      thread-name-prefix: tenant-sched-

# Server Configuration
server:
  port: ${SERVER_PORT:4000}
  servlet:
    context-path: /api/v1
  compression:
    enabled: true
    mime-types: application/json,application/xml,text/html,text/xml,text/plain
    min-response-size: 1024
  error:
    include-message: always
    include-binding-errors: never
    include-stacktrace: never
    include-exception: false
  shutdown: graceful
  tomcat:
    max-connections: ${TOMCAT_MAX_CONNECTIONS:8192}
    threads:
      max: ${TOMCAT_MAX_THREADS:200}
      min-spare: ${TOMCAT_MIN_THREADS:10}
    connection-timeout: ${TOMCAT_CONNECTION_TIMEOUT:20s}

# Actuator Configuration
management:
  endpoints:
    web:
      base-path: /actuator
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: when-authorized
      probes:
        enabled: true
    metrics:
      access: read_only
  metrics:
    distribution:
      percentiles-histogram:
        http.server.requests: true
    tags:
      application: ${spring.application.name}
      environment: production
      version: ${APP_VERSION:unknown}
  health:
    livenessstate:
      enabled: true
    readinessstate:
      enabled: true
    db:
      enabled: true
    diskspace:
      enabled: true
  prometheus:
    metrics:
      export:
        enabled: true

# Logging Configuration
logging:
  level:
    root: ${LOG_LEVEL_ROOT:WARN}
    com.nnipa.tenant: ${LOG_LEVEL_APP:INFO}
    org.springframework.web: WARN
    org.springframework.security: WARN
    org.hibernate: WARN
    org.springframework.boot.actuate: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{traceId:-},%X{spanId:-}] %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{traceId:-},%X{spanId:-}] %logger{36} - %msg%n"
  file:
    name: ${LOG_PATH:/var/log/nnipa}/tenant-service.log
  logback:
    rollingpolicy:
      max-file-size: ${LOG_MAX_FILE_SIZE:100MB}
      max-history: ${LOG_MAX_HISTORY:90}
      total-size-cap: ${LOG_TOTAL_SIZE:10GB}

# OpenAPI/Swagger Configuration
springdoc:
  api-docs:
    enabled: ${API_DOCS_ENABLED:false}
    path: /api-docs
  swagger-ui:
    enabled: ${SWAGGER_UI_ENABLED:false}
    path: /swagger-ui.html
    try-it-out-enabled: false
    filter: true
    operations-sorter: method
    tags-sorter: alpha
  show-actuator: false

# Application Custom Properties
app:
  tenant:
    default-schema-prefix: tenant_
    max-tenants-per-page: ${MAX_TENANTS_PER_PAGE:20}
    cache-ttl: ${TENANT_CACHE_TTL:600}
    development-mode: false
    mock-external-services: false
    provisioning:
      timeout-seconds: ${PROVISIONING_TIMEOUT:60}
      retry-attempts: ${PROVISIONING_RETRY:3}
    security:
      enable-rate-limiting: true
      max-requests-per-minute: ${RATE_LIMIT_RPM:100}
    limits:
      free:
        max-users: 10
        max-storage-gb: 25
        max-datasets: 100
      starter:
        max-users: 50
        max-storage-gb: 100
        max-datasets: 500
      professional:
        max-users: 200
        max-storage-gb: 500
        max-datasets: 2000
      enterprise:
        max-users: -1
        max-storage-gb: -1
        max-datasets: -1
    features:
      default:
        - BASIC_ANALYTICS
        - DATA_EXPORT
        - API_ACCESS
      professional:
        - ADVANCED_ANALYTICS
        - CUSTOM_BRANDING
        - PRIORITY_SUPPORT
      enterprise:
        - ML_MODELS
        - WHITE_LABELING
        - DEDICATED_SUPPORT
        - CUSTOM_INTEGRATIONS